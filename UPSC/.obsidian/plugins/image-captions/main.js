/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageCaptions
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ImageCaptions = class extends import_obsidian.Plugin {
  async onload() {
    this.observer = new MutationObserver((mutations) => {
      mutations.forEach((rec) => {
        if (rec.type === "childList") {
          rec.target.querySelectorAll(".image-embed").forEach((container) => {
            const img = container.querySelector("img");
            let captionText = container.getAttribute("alt") || "";
            const width = container.getAttribute("width") || "";
            if (captionText === container.getAttribute("src")) {
              captionText = "";
            }
            if (!img)
              return;
            const figure = container.querySelector("figure");
            if (figure) {
              if (!captionText) {
                container.appendChild(img);
                figure.remove();
              } else {
                const figCaption = container.querySelector("figcaption");
                if (figCaption) {
                  figCaption.innerText = captionText;
                }
              }
            } else {
              if (img && captionText && captionText !== container.getAttribute("src")) {
                const figure2 = container.createEl("figure");
                figure2.addClass("image-captions-figure");
                figure2.appendChild(img);
                figure2.createEl("figcaption", {
                  text: captionText,
                  cls: "image-captions-caption"
                });
              }
            }
            if (width) {
              img.setAttribute("width", width);
            } else {
              img.removeAttribute("width");
            }
          });
        }
      });
    });
    this.observer.observe(document.body, { subtree: true, childList: true });
  }
  onunload() {
    this.observer.disconnect();
  }
};
