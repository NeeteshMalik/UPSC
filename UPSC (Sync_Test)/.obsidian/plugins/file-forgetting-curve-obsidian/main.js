/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module2) {
    !function(t, e) {
      typeof exports == "object" && typeof module2 != "undefined" ? module2.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = typeof globalThis != "undefined" ? globalThis : t || self).dayjs = e();
    }(exports, function() {
      "use strict";
      var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
        var e2 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
        return "[" + t2 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
      } }, m = function(t2, e2, n2) {
        var r2 = String(t2);
        return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
      }, v = { s: m, z: function(t2) {
        var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: function t2(e2, n2) {
        if (e2.date() < n2.date())
          return -t2(n2, e2);
        var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, f), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
        return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return t2 === void 0;
      } }, g = "en", D = {};
      D[g] = M;
      var p = function(t2) {
        return t2 instanceof _;
      }, S = function t2(e2, n2, r2) {
        var i2;
        if (!e2)
          return g;
        if (typeof e2 == "string") {
          var s2 = e2.toLowerCase();
          D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
          var u2 = e2.split("-");
          if (!i2 && u2.length > 1)
            return t2(u2[0]);
        } else {
          var a2 = e2.name;
          D[a2] = e2, i2 = a2;
        }
        return !r2 && i2 && (g = i2), i2 || !r2 && g;
      }, w = function(t2, e2) {
        if (p(t2))
          return t2.clone();
        var n2 = typeof e2 == "object" ? e2 : {};
        return n2.date = t2, n2.args = arguments, new _(n2);
      }, O = v;
      O.l = S, O.i = p, O.w = function(t2, e2) {
        return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _ = function() {
        function M2(t2) {
          this.$L = S(t2.locale, null, true), this.parse(t2);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
          this.$d = function(t3) {
            var e2 = t3.date, n2 = t3.utc;
            if (e2 === null)
              return new Date(NaN);
            if (O.u(e2))
              return new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if (typeof e2 == "string" && !/Z$/i.test(e2)) {
              var r2 = e2.match($);
              if (r2) {
                var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
              }
            }
            return new Date(e2);
          }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m2.$utils = function() {
          return O;
        }, m2.isValid = function() {
          return !(this.$d.toString() === l);
        }, m2.isSame = function(t2, e2) {
          var n2 = w(t2);
          return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
        }, m2.isAfter = function(t2, e2) {
          return w(t2) < this.startOf(e2);
        }, m2.isBefore = function(t2, e2) {
          return this.endOf(e2) < w(t2);
        }, m2.$g = function(t2, e2, n2) {
          return O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t2, e2) {
          var n2 = this, r2 = !!O.u(e2) || e2, h2 = O.p(t2), l2 = function(t3, e3) {
            var i2 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            return r2 ? i2 : i2.endOf(a);
          }, $2 = function(t3, e3) {
            return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
          switch (h2) {
            case c:
              return r2 ? l2(1, 0) : l2(31, 11);
            case f:
              return r2 ? l2(1, M3) : l2(0, M3 + 1);
            case o:
              var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
              return l2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
            case a:
            case d:
              return $2(v2 + "Hours", 0);
            case u:
              return $2(v2 + "Minutes", 1);
            case s:
              return $2(v2 + "Seconds", 2);
            case i:
              return $2(v2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m2.$set = function(t2, e2) {
          var n2, o2 = O.p(t2), h2 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = h2 + "Date", n2[d] = h2 + "Date", n2[f] = h2 + "Month", n2[c] = h2 + "FullYear", n2[u] = h2 + "Hours", n2[s] = h2 + "Minutes", n2[i] = h2 + "Seconds", n2[r] = h2 + "Milliseconds", n2)[o2], $2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
          if (o2 === f || o2 === c) {
            var y2 = this.clone().set(d, 1);
            y2.$d[l2]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            l2 && this.$d[l2]($2);
          return this.init(), this;
        }, m2.set = function(t2, e2) {
          return this.clone().$set(t2, e2);
        }, m2.get = function(t2) {
          return this[O.p(t2)]();
        }, m2.add = function(r2, h2) {
          var d2, l2 = this;
          r2 = Number(r2);
          var $2 = O.p(h2), y2 = function(t2) {
            var e2 = w(l2);
            return O.w(e2.date(e2.date() + Math.round(t2 * r2)), l2);
          };
          if ($2 === f)
            return this.set(f, this.$M + r2);
          if ($2 === c)
            return this.set(c, this.$y + r2);
          if ($2 === a)
            return y2(1);
          if ($2 === o)
            return y2(7);
          var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[$2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return O.w(m3, this);
        }, m2.subtract = function(t2, e2) {
          return this.add(-1 * t2, e2);
        }, m2.format = function(t2) {
          var e2 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || l;
          var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h2 = function(t3, n3, i3, s3) {
            return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
          }, c2 = function(t3) {
            return O.s(s2 % 12 || 12, t3, "0");
          }, d2 = n2.meridiem || function(t3, e3, n3) {
            var r3 = t3 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          }, $2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h2(n2.monthsShort, a2, f2, 3), MMMM: h2(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h2(n2.weekdaysMin, this.$W, o2, 2), ddd: h2(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i2 };
          return r2.replace(y, function(t3, e3) {
            return e3 || $2[t3] || i2.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, l2) {
          var $2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, v2 = this - M3, g2 = O.m(this, M3);
          return g2 = ($2 = {}, $2[c] = g2 / 12, $2[f] = g2, $2[h] = g2 / 3, $2[o] = (v2 - m3) / 6048e5, $2[a] = (v2 - m3) / 864e5, $2[u] = v2 / n, $2[s] = v2 / e, $2[i] = v2 / t, $2)[y2] || v2, l2 ? g2 : O.a(g2);
        }, m2.daysInMonth = function() {
          return this.endOf(f).$D;
        }, m2.$locale = function() {
          return D[this.$L];
        }, m2.locale = function(t2, e2) {
          if (!t2)
            return this.$L;
          var n2 = this.clone(), r2 = S(t2, e2, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return O.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), T = _.prototype;
      return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
        T[t2[1]] = function(e2) {
          return this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend = function(t2, e2) {
        return t2.$i || (t2(e2, _, w), t2.$i = true), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
        return w(1e3 * t2);
      }, w.en = D[g], w.Ls = D, w.p = {}, w;
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/plugin.ts
var import_obsidian4 = require("obsidian");

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/plugin.ts
var import_dayjs3 = __toESM(require_dayjs_min());

// src/view.ts
var import_dayjs = __toESM(require_dayjs_min());
var import_obsidian = require("obsidian");

// src/util/dom.ts
function generateClass(el, cls) {
  if (!cls)
    return;
  if (typeof cls == "string") {
    el.setAttribute("class", cls);
  } else if (Array.isArray(cls)) {
    for (let i of cls) {
      generateClass(el, i);
    }
  } else if (typeof cls == "function") {
    generateClass(el, cls(el));
  } else if (typeof cls == "object") {
    const result = [];
    for (let i in cls) {
      if (typeof cls[i] == "boolean" && cls[i]) {
        result.push(i);
      } else if (typeof cls[i] == "function" && cls[i](el)) {
        result.push(i);
      }
    }
  }
}
function generateStyle(el, style) {
  if (!style)
    return;
  if (typeof style == "string") {
    el.setAttribute("style", style);
  } else if (Array.isArray(style)) {
    for (let i of style) {
      generateStyle(el, i);
    }
  } else if (typeof style == "function") {
    generateStyle(el, style(el));
  } else if (typeof style == "object") {
    for (let i in style) {
      el.style[i] = style[i];
    }
  }
}
function generateAttrs(el, attrs) {
  if (!attrs)
    return;
  if (Array.isArray(attrs)) {
    for (let i of attrs) {
      generateAttrs(el, i);
    }
  } else if (typeof attrs == "function") {
    generateAttrs(el, attrs(el));
  } else if (typeof attrs == "object") {
    for (let i in attrs) {
      if (typeof attrs[i] == "function") {
        el.setAttribute(i, attrs[i](el));
      } else if (typeof attrs[i] == "string") {
        el.setAttribute(i, attrs[i]);
      }
    }
  }
}
function isWritable(obj, key) {
  const desc = Object.getOwnPropertyDescriptor(obj, key) || {};
  return Boolean(desc.writable);
}
function generateProperties(el, properties) {
  if (!properties)
    return;
  if (Array.isArray(properties)) {
    for (let i of properties) {
      generateProperties(el, i);
    }
  } else if (typeof properties == "function") {
    generateProperties(el, properties(el));
  } else if (typeof properties == "object") {
    for (let i in properties) {
      const prop = i;
      if (isWritable(el, prop)) {
        el[prop] = properties[prop];
      }
    }
  }
}
function generateEvent(el, event) {
  if (!event)
    return;
  if (Array.isArray(event)) {
    for (let i of event) {
      generateEvent(el, i);
    }
  } else if (typeof event == "function") {
    generateEvent(el, event(el));
  } else if (typeof event == "object") {
    for (let i in event) {
      el.addEventListener(i, (e) => {
        event[i](el, e);
      });
    }
  }
}
function createElement(tag, data, children) {
  const el = typeof tag == "string" ? document.createElement(tag) : tag;
  if (typeof data == "string") {
    el.innerText = data;
  } else if (data) {
    if (data.create)
      data.create(el);
    generateClass(el, data.cls);
    generateClass(el, data.class);
    generateStyle(el, data.style);
    generateAttrs(el, data.attrs);
    generateAttrs(el, data.attributes);
    generateProperties(el, data.properties);
    generateEvent(el, data.on);
    generateEvent(el, data.event);
    generateEvent(el, data.listener);
    if (data.text)
      el.innerText = data.text;
    if (data.html)
      el.innerHTML = data.html;
    if (data.value)
      el.value = data.value;
    if (data.click)
      el.addEventListener("click", (e) => {
        if (data.click)
          data.click(el, e);
      });
    if (data.change)
      el.addEventListener("change", (e) => {
        if (data.change)
          data.change(el, e);
      });
    if (data.mount)
      data.mount(el);
  }
  if (children) {
    if (Array.isArray(children)) {
      for (let i of children) {
        if (i)
          el.append(i);
      }
    } else {
      el.append(children);
    }
  }
  return el;
}

// src/lang/en.ts
var en_default = {};

// src/lang/zh.ts
var zh_default = {
  "File Forgetting Curve": "\u6587\u4EF6\u9057\u5FD8\u66F2\u7EBF",
  "View - File Forgetting Curve": "\u89C6\u56FE - \u6587\u4EF6\u9057\u5FD8\u66F2\u7EBF",
  "File Expired": "\u6587\u4EF6\u5230\u671F",
  "Open [View - File Forgetting Curve] to check": "\u6253\u5F00 [\u89C6\u56FE - \u6587\u4EF6\u9057\u5FD8\u66F2\u7EBF] \u67E5\u770B",
  "Pick Label": "\u9009\u62E9\u6807\u7B7E",
  "Remove Label": "\u5220\u9664\u6807\u7B7E",
  "Create New Label": "\u521B\u5EFA\u65B0\u6807\u7B7E",
  "Please enter a label name": "\u8BF7\u8F93\u5165\u6807\u7B7E\u540D\u79F0",
  "Label name cannot be empty": "\u6807\u7B7E\u540D\u5B57\u4E0D\u80FD\u4E3A\u7A7A",
  "Already exists label: {{label}}": "\u5DF2\u5B58\u5728\u6807\u7B7E: [{{label}}]",
  "Remove Remind - File Forgetting Curve": "\u5220\u9664\u63D0\u9192 - \u6587\u4EF6\u9057\u5FD8\u66F2\u7EBF",
  "Modify Remind - File Forgetting Curve": "\u4FEE\u6539\u63D0\u9192 - \u6587\u4EF6\u9057\u5FD8\u66F2\u7EBF",
  "Modify Remind": "\u4FEE\u6539\u63D0\u9192",
  "Remind Date": "\u63D0\u9192\u65F6\u95F4",
  "Recommend": "\u63A8\u8350",
  "Impossible Forget": "\u4E0D\u53EF\u80FD\u9057\u5FD8",
  "Maybe Forget": "\u53EF\u80FD\u4F1A\u9057\u5FD8",
  "Very Easy": "\u975E\u5E38\u7B80\u5355",
  "Easy": "\u7B80\u5355",
  "Normal": "\u6B63\u5E38",
  "Hard": "\u56F0\u96BE",
  "Very Hard": "\u975E\u5E38\u56F0\u96BE",
  "Forgotten Some": "\u5FD8\u4E86\u4E00\u70B9",
  "Forgeted": "\u6CA1\u6709\u5370\u8C61",
  "Name": "\u540D\u79F0",
  "Remark": "\u5907\u6CE8",
  "Create Remind - File Forgetting Curve": "\u521B\u5EFA\u63D0\u9192 - \u6587\u4EF6\u9057\u5FD8\u66F2\u7EBF",
  "Empty": "\u7A7A",
  "Reload": "\u91CD\u65B0\u52A0\u8F7D",
  "Expired": "\u5DF2\u5230\u671F",
  "Waiting for a reminder": "\u7B49\u5F85\u63D0\u9192",
  "day": "\u5929",
  "days": "\u5929",
  "hours": "\u5C0F\u65F6",
  "hour": "\u5C0F\u65F6",
  "minutes": "\u5206\u949F",
  "minute": "\u5206\u949F"
};

// src/lang/index.ts
var lang = {
  en: en_default,
  zh: zh_default,
  get
};
function get(text, args) {
  var _a;
  const language = ((_a = window.i18next) == null ? void 0 : _a.language) || "en";
  const map2 = lang[language] || en_default;
  let result = map2[text] || en_default[text] || text;
  if (args) {
    for (let i in args) {
      result = result.replace(new RegExp(`\\{\\{${i}\\}\\}`, "g"), args[i]);
    }
  }
  return result;
}
lang.get = get;
var lang_default = lang;

// src/view.ts
var REMEMBER_HELPER_VIEW = "remember-helper-view";
function getExpiredFiles(fileList, label) {
  const files = [];
  for (let i of fileList) {
    if (!label || i.label == label) {
      if ((0, import_dayjs.default)() > (0, import_dayjs.default)(i.remind)) {
        files.push(i);
      }
    }
  }
  return files;
}
function getRemindFiles(fileList, label) {
  const files = [];
  for (let i of fileList) {
    if (!label || i.label == label) {
      if ((0, import_dayjs.default)() < (0, import_dayjs.default)(i.remind)) {
        files.push(i);
      }
    }
  }
  return files;
}
var _FileForgettingCurveView = class extends import_obsidian.ItemView {
  constructor(plugin, leaf) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return REMEMBER_HELPER_VIEW;
  }
  getIcon() {
    return "bell";
  }
  getDisplayText() {
    return lang_default.get("File Forgetting Curve");
  }
  async onOpen() {
    _FileForgettingCurveView.instance = this;
    this.update();
  }
  createEmpty() {
    return createElement("div", {
      text: lang_default.get("Empty"),
      style: {
        width: "100%",
        padding: "40px 0",
        textAlign: "center"
      }
    });
  }
  update() {
    const container = this.containerEl.children[1];
    container.empty();
    if (!this.plugin.data.labels.length) {
      container.append(this.createEmpty());
      return;
    }
    container.append(createElement("div", null, [
      createElement("select", {
        class: "dropdown",
        style: { width: "100%", maxWidth: "300px" },
        change: () => {
          this.updateList(false);
        },
        create: (el) => {
          this.labelElement = el;
        }
      }, this.plugin.data.labels.map((label) => {
        return createElement("option", { text: label.name, value: label.id });
      })),
      createElement("div", null, [
        createElement("button", {
          text: lang_default.get("Reload"),
          style: { marginRight: "10px", marginTop: "10px" },
          click: () => {
            this.updateList(false);
          }
        }),
        createElement("button", {
          text: lang_default.get("Remove Label"),
          style: { marginRight: "10px", marginTop: "10px" },
          class: "mod-cta",
          click: () => {
            this.plugin.openPicker({
              buttons: false,
              title: lang_default.get("Remove Label"),
              callback: (_, data) => {
                if (Array.isArray(data))
                  return;
                for (let i of this.plugin.data.labels) {
                  if (i.id === data.value) {
                    this.plugin.data.labels.splice(this.plugin.data.labels.indexOf(i), 1);
                    break;
                  }
                }
                this.plugin.savePluginData();
                this.update();
              }
            });
          }
        })
      ])
    ]));
    if (this.plugin.data.labels.length)
      this.labelElement.value = this.plugin.data.labels[0].id;
    this.expiredElement = createElement("div");
    container.append(this.expiredElement);
    this.remindElement = createElement("div");
    container.append(this.remindElement);
    this.updateList();
  }
  updateList(auto = true) {
    this.plugin.data.files = this.plugin.data.files.sort((a, b) => {
      const start = (0, import_dayjs.default)(a.remind);
      const end = (0, import_dayjs.default)(b.remind);
      return start === end ? 0 : start > end ? 1 : -1;
    });
    this.updateExpired(auto);
    this.updateRemind();
  }
  createDiffTime(remind) {
    const start = (0, import_dayjs.default)();
    const end = (0, import_dayjs.default)(remind);
    if (start >= end)
      return null;
    let result = [];
    let days = end.diff(start, "day", true);
    if (days > 1)
      result.push(Math.floor(days) + " " + lang_default.get(days >= 2 ? "days" : "day"));
    var hours = (days - Math.floor(days)) * 24;
    if (hours > 1)
      result.push(Math.floor(hours) + " " + lang_default.get(hours >= 2 ? "hours" : "hour"));
    var minutes = (hours - Math.floor(hours)) * 60;
    if (minutes > 1)
      result.push(Math.floor(minutes) + " " + lang_default.get(minutes >= 2 ? "minutes" : "minute"));
    return createElement("div", {
      style: { display: "inline-block", marginRight: "10px", marginBottom: "5px", color: "#888" },
      text: result.join(" ")
    });
  }
  createFileLink(el, file) {
    const abstractFile = this.app.vault.getAbstractFileByPath(file.file);
    if (abstractFile) {
      el.append(createElement("div", {
        class: "cm-s-obsidian",
        style: { backgroundColor: "var(--background-primary)", padding: "10px 0 5px 10px", borderRadius: "8px", marginBottom: "10px", cursor: "pointer" },
        on: {
          click: () => {
            this.app.workspace.getLeaf().openFile(abstractFile);
          },
          contextmenu: (_, e) => {
            const menu = new import_obsidian.Menu();
            this.plugin.createMenu(menu, abstractFile);
            menu.showAtMouseEvent(e);
          }
        }
      }, [
        createElement("span", {
          text: file.name || abstractFile.name,
          class: "cm-link",
          style: { marginBottom: "5px", marginRight: "10px" }
        }),
        this.createDiffTime(file.remind),
        file.remark ? createElement("div", {
          style: { color: "var(--inline-title-color)", marginRight: "10px", marginBottom: "5px" },
          text: file.remark
        }) : null,
        file.name ? createElement("div", {
          style: { color: "#888", fontSize: "12px", marginRight: "10px", marginBottom: "5px" },
          text: abstractFile.name
        }) : null
      ]));
      return true;
    } else {
      const index = this.plugin.data.files.indexOf(file);
      if (index != -1)
        this.plugin.data.files.splice(index, 1);
      return false;
    }
  }
  updateExpired(auto = true) {
    this.expiredElement.empty();
    this.expiredElement.append(createElement("h4", { text: lang_default.get("Expired"), style: { margin: "10px 0" } }));
    const all = getExpiredFiles(this.plugin.data.files);
    let files = getExpiredFiles(all, this.labelElement.value);
    if (auto && !files.length && all.length) {
      let changed2 = false;
      for (let i of all) {
        for (let x of this.plugin.data.labels) {
          if (i.label == x.id) {
            this.labelElement.value = x.id;
            changed2 = true;
            break;
          }
        }
        if (changed2)
          break;
      }
      if (changed2)
        files = getExpiredFiles(all, this.labelElement.value);
    }
    if (!files.length) {
      this.expiredElement.append(createElement("div", "-"));
      return;
    }
    let changed = false;
    for (let i of files) {
      if (this.createFileLink(this.expiredElement, i))
        changed = true;
    }
    if (changed)
      this.plugin.savePluginData();
  }
  updateRemind() {
    this.remindElement.empty();
    this.remindElement.append(createElement("h4", { text: lang_default.get("Waiting for a reminder"), style: { margin: "10px 0" } }));
    const files = getRemindFiles(this.plugin.data.files, this.labelElement.value);
    if (!files.length) {
      this.remindElement.append(createElement("div", "-"));
      return;
    }
    let changed = false;
    for (let i of files) {
      if (this.createFileLink(this.remindElement, i))
        changed = true;
    }
    if (changed)
      this.plugin.savePluginData();
  }
  async onClose() {
    _FileForgettingCurveView.instance = null;
  }
};
var FileForgettingCurveView = _FileForgettingCurveView;
FileForgettingCurveView.instance = null;

// src/component/picker.ts
var import_obsidian2 = require("obsidian");
var PickerModal = class extends import_obsidian2.Modal {
  constructor(app, config) {
    super(app);
    this.title = "Picker";
    this.content = "";
    this.options = [];
    this.buttons = [];
    this.multiple = false;
    this.event = {};
    this.storage = {};
    this.callback = () => {
    };
    this.id = v4_default();
    this.title = config.title || this.title;
    this.content = config.content || this.content;
    this.options = config.options || this.options;
    this.multiple = config.multiple === true;
    this.buttons = config.buttons || this.buttons;
    this.width = config.width || this.width;
    this.height = config.height || this.height;
    this.event = config.event || this.event;
    this.storage = config.storage || this.storage;
    this.callback = config.callback;
  }
  onOpen() {
    this.create();
  }
  createEmpty() {
    return createElement("div", {
      text: "Empty",
      style: {
        width: "100%",
        padding: "40px 0",
        textAlign: "center"
      }
    });
  }
  create() {
    let { contentEl } = this;
    if (this.width)
      this.modalEl.style.width = this.width;
    if (this.height)
      this.modalEl.style.height = this.height;
    contentEl.empty();
    if (this.event.create)
      this.event.create(this);
    contentEl.createEl("h1", { text: this.title });
    contentEl.createEl("p", { text: this.content });
    const area = createElement(contentEl.createEl("div"));
    const list = [];
    if (this.options.length) {
      let first = null;
      for (let option of this.options) {
        let input = createElement("input", {
          attrs: { type: this.multiple ? "checkbox" : "radio", name: this.id, text: option.text }
        });
        list.push(input);
        area.append(createElement("label", {
          style: { whiteSpace: "nowrap" }
        }, [
          input,
          createElement("div", {
            text: option.text,
            style: {
              display: "inline-block",
              padding: "0 10px 0 5px"
            }
          })
        ]));
        if (!first)
          first = input;
      }
      if (!this.multiple && first)
        first.checked = true;
    } else {
      area.append(this.createEmpty());
    }
    if (this.event.content)
      this.event.content(this);
    const space = contentEl.createEl("div");
    space.style.height = "30px";
    const buttons = new import_obsidian2.Setting(contentEl);
    for (let i of this.buttons) {
      ((i2) => {
        buttons.addButton((button) => {
          button.setButtonText(i2.text).onClick(() => {
            i2.click(this);
          });
          if (i2.icon)
            button.setIcon(i2.icon);
          return button;
        });
      })(i);
    }
    buttons.addButton((button) => button.setButtonText("OK").onClick(() => {
      if (this.multiple) {
        const result = [];
        for (let input of list) {
          if (input.checked) {
            const text = input.getAttribute("text");
            for (let i of this.options) {
              if (i.text === text) {
                result.push(i);
                break;
              }
            }
          }
        }
        this.callback(this, result);
      } else {
        for (let input of list) {
          if (input.checked) {
            const text = input.getAttribute("text");
            for (let i of this.options) {
              if (i.text === text) {
                this.callback(this, i);
                break;
              }
            }
          }
        }
      }
      this.close();
    }));
    if (this.event.mount)
      this.event.mount(this);
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/component/input.ts
var import_obsidian3 = require("obsidian");
var InputModal = class extends import_obsidian3.Modal {
  constructor(app, config) {
    super(app);
    this.title = "Input";
    this.content = "";
    this.placeholder = "";
    this.callback = () => {
    };
    this.title = config.title || this.title;
    this.content = config.content || this.content;
    this.placeholder = config.placeholder || this.placeholder;
    this.width = config.width || this.width;
    this.height = config.height || this.height;
    this.callback = config.callback;
  }
  onOpen() {
    let { contentEl } = this;
    if (this.width)
      this.modalEl.style.width = this.width;
    if (this.height)
      this.modalEl.style.height = this.height;
    contentEl.createEl("h1", { text: this.title });
    contentEl.createEl("p", { text: this.content });
    const input = contentEl.createEl("input", { placeholder: this.placeholder });
    input.type = "text";
    input.style.width = "100%";
    input.style.padding = "5px 10px";
    input.addEventListener("keypress", (e) => {
      if (e.key == "Enter") {
        this.callback(input.value);
        this.close();
      }
    });
    new import_obsidian3.Setting(contentEl).addButton((button) => button.setButtonText("OK").onClick(() => {
      this.callback(input.value);
      this.close();
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/util/date.ts
var import_dayjs2 = __toESM(require_dayjs_min());
var DateFormat = "YYYY-MM-DD HH:mm:ss";
var ForgettingCurveTime = [
  {
    level: 20,
    name: "20 minutes",
    description: "Very Hard",
    date: (date) => (0, import_dayjs2.default)(date).add(20, "minutes").format(DateFormat)
  },
  {
    level: 60,
    name: "1 hours",
    description: "Hard",
    date: (date) => (0, import_dayjs2.default)(date).add(1, "hours").format(DateFormat)
  },
  {
    level: 480,
    name: "8 hours",
    description: "Normal",
    date: (date) => (0, import_dayjs2.default)(date).add(8, "hours").format(DateFormat)
  },
  {
    level: 1440,
    name: "1 days",
    description: "Easy",
    date: (date) => (0, import_dayjs2.default)(date).add(1, "days").format(DateFormat)
  },
  {
    level: 2880,
    name: "2 days",
    description: "Very Easy",
    date: (date) => (0, import_dayjs2.default)(date).add(2, "days").format(DateFormat)
  },
  {
    level: 10080,
    name: "7 days",
    description: "Maybe Forget",
    date: (date) => (0, import_dayjs2.default)(date).add(7, "days").format(DateFormat)
  },
  {
    level: 43200,
    name: "30 days",
    description: "Impossible Forget",
    date: (date) => (0, import_dayjs2.default)(date).add(30, "days").format(DateFormat)
  }
];
var map = {};
for (let i of ForgettingCurveTime) {
  map[i.level] = i;
}
function getNextForgettingCurveTime(level) {
  let flag = false;
  for (let i of ForgettingCurveTime) {
    if (flag)
      return i;
    if (i.level === level)
      flag = true;
  }
  return null;
}
function getForgettingCurveTime(level) {
  for (let i of ForgettingCurveTime) {
    if (i.level === level)
      return i;
  }
  return null;
}
function getDiffForgettingCurveTime(level1, level2) {
  let time1 = getForgettingCurveTime(level1);
  if (!time1)
    return null;
  let time2 = getForgettingCurveTime(level2);
  if (!time2)
    return null;
  let position1 = ForgettingCurveTime.indexOf(time1);
  let position2 = ForgettingCurveTime.indexOf(time2);
  return position1 - position2;
}

// src/plugin.ts
var DEFAULT_DATA = {
  labels: [],
  files: []
};
var FileForgettingCurve = class extends import_obsidian4.Plugin {
  async loadPluginData() {
    this.data = Object.assign({}, DEFAULT_DATA, await this.loadData());
  }
  async savePluginData() {
    await this.saveData(this.data);
  }
  async onload() {
    await this.loadPluginData();
    this.registerView(REMEMBER_HELPER_VIEW, (leaf) => new FileForgettingCurveView(this, leaf));
    setTimeout(() => {
      this.addRibbonIcon("bell", lang_default.get("View - File Forgetting Curve"), () => {
        this.activateView();
      });
    }, 50);
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      this.createMenu(menu, file);
    }));
    this.registerEvent(this.app.workspace.on("editor-menu", (menu) => {
      this.createMenu(menu);
    }));
    let count = 0;
    this.registerEvent(this.app.workspace.on("file-open", () => {
      count++;
      if (count % 5 != 0)
        return;
      setTimeout(() => {
        this.noticeExpiredFiles();
      }, 1500);
    }));
    setTimeout(() => {
      this.noticeExpiredFiles();
    }, 3e3);
  }
  noticeExpiredFiles() {
    const expired = getExpiredFiles(this.data.files);
    if (expired.length) {
      if (expired.length > 1) {
        new import_obsidian4.Notice(`${lang_default.get("File Expired")}!\r
${expired.length}\r
${lang_default.get("Open [View - File Forgetting Curve] to check")}`);
      } else {
        const abstractFile = this.app.vault.getAbstractFileByPath(expired[0].file);
        if (abstractFile) {
          new import_obsidian4.Notice(`${lang_default.get("File Expired")}!\r
${expired[0].name || abstractFile.name}\r
${lang_default.get("Open [View - File Forgetting Curve] to check")}${expired[0].remark ? "\r\n" + expired[0].remark : ""}`);
        }
      }
    }
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(REMEMBER_HELPER_VIEW);
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(REMEMBER_HELPER_VIEW);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: REMEMBER_HELPER_VIEW,
      active: true
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(REMEMBER_HELPER_VIEW)[0]);
  }
  containsLabel(key, value) {
    for (let i of this.data.labels) {
      if (i[key] === value)
        return true;
    }
    return false;
  }
  createLabelOptions() {
    const result = [];
    for (let i of this.data.labels) {
      result.push({
        text: i.name,
        value: i.id
      });
    }
    return result;
  }
  openPicker(options) {
    const picker = new PickerModal(this.app, {
      title: options.title || lang_default.get("Pick Label"),
      options: this.createLabelOptions(),
      width: "730px",
      event: options.event,
      buttons: options.buttons === false ? void 0 : [{
        text: lang_default.get("Remove Label"),
        click: () => {
          this.openPicker({
            buttons: false,
            title: lang_default.get("Remove Label"),
            callback: (_, data) => {
              var _a;
              if (Array.isArray(data))
                return;
              for (let i of this.data.labels) {
                if (i.id === data.value) {
                  this.data.labels.splice(this.data.labels.indexOf(i), 1);
                  break;
                }
              }
              this.savePluginData();
              picker.options = this.createLabelOptions();
              picker.create();
              (_a = FileForgettingCurveView.instance) == null ? void 0 : _a.update();
            }
          });
        }
      }, {
        text: lang_default.get("Create New Label"),
        click: (modal) => {
          new InputModal(this.app, {
            title: lang_default.get("Create New Label"),
            content: lang_default.get("Please enter a label name"),
            width: "330px",
            callback: (value) => {
              var _a;
              if (!value) {
                new import_obsidian4.Notice(lang_default.get("Label name cannot be empty"));
                return;
              }
              if (this.containsLabel("name", value)) {
                new import_obsidian4.Notice(lang_default.get("Already exists label: {{label}}", { label: value }));
                return;
              }
              let id;
              while (true) {
                id = v4_default();
                if (!this.containsLabel("id", id))
                  break;
              }
              this.data.labels.push({ id, name: value });
              this.savePluginData();
              modal.options = this.createLabelOptions();
              modal.create();
              (_a = FileForgettingCurveView.instance) == null ? void 0 : _a.update();
            }
          }).open();
        }
      }],
      callback: options.callback
    });
    picker.open();
  }
  async createMenu(menu, file = null) {
    const activeFile = file || this.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    let remember = null;
    for (let i of this.data.files) {
      if (i.file === activeFile.path) {
        remember = i;
      }
    }
    if (remember) {
      const file2 = remember;
      menu.addItem((item) => {
        item.setTitle(lang_default.get("Remove Remind - File Forgetting Curve")).setIcon("bell-off").onClick(() => {
          var _a;
          let changed = false;
          for (let i = this.data.files.length - 1; i >= 0; i--) {
            if (this.data.files[i].file === activeFile.path) {
              this.data.files.splice(i, 1);
              changed = true;
            }
          }
          if (changed) {
            this.savePluginData();
            (_a = FileForgettingCurveView.instance) == null ? void 0 : _a.updateList();
          }
        });
        return item;
      });
      menu.addItem((item) => {
        item.setTitle(lang_default.get("Modify Remind - File Forgetting Curve")).setIcon("bell").onClick(() => {
          this.openPicker({
            title: lang_default.get("Modify Remind"),
            event: {
              content: (modal) => {
                if (!modal.options.length)
                  return;
                createElement(modal.contentEl.createEl("h4"), { text: lang_default.get("Remind Date"), style: { margin: "20px 0" } });
                let nextTime = getNextForgettingCurveTime(file2.level);
                let lastOption = null;
                const select = createElement(modal.contentEl.createEl("select"), {
                  class: "dropdown",
                  change: (el) => {
                    for (let i of ForgettingCurveTime) {
                      if (i.name === el.value) {
                        modal.storage.remind = i;
                      }
                    }
                  }
                }, ForgettingCurveTime.map((i) => {
                  let recommend = nextTime === i;
                  if (recommend)
                    modal.storage.remind = i;
                  return createElement("option", {
                    text: `${i.date()} - ${i.name}${recommend ? " - " + lang_default.get("Recommend") : ""}`,
                    value: i.name,
                    create: (el) => {
                      lastOption = el;
                    }
                  });
                }));
                if (!modal.storage.remind) {
                  modal.storage.remind = ForgettingCurveTime[ForgettingCurveTime.length - 1];
                  if (lastOption)
                    lastOption.innerText = lastOption.innerText + " - " + lang_default.get("Recommend");
                }
                select.value = modal.storage.remind.name;
                createElement(modal.contentEl.createEl("div"), null, ForgettingCurveTime.map((i) => {
                  const diff = getDiffForgettingCurveTime(file2.level, i.level);
                  if (diff === null)
                    return null;
                  const map2 = {
                    "-5": "Impossible Forget",
                    "-4": "Maybe Forget",
                    "-3": "Very Easy",
                    "-2": "Easy",
                    "-1": "Normal",
                    "0": "Hard",
                    "1": "Very Hard",
                    "2": "Forgotten Some",
                    "3": "Forgeted"
                  };
                  const description = map2[diff];
                  if (!description)
                    return null;
                  let recommend = nextTime === i;
                  return createElement(modal.contentEl.createEl("button"), {
                    text: `${lang_default.get(description)} - ${i.name}${recommend ? " - " + lang_default.get("Recommend") : ""}`,
                    style: { marginRight: "10px", marginTop: "10px" },
                    click: () => {
                      modal.storage.remind = i;
                      select.value = modal.storage.remind.name;
                    }
                  });
                }));
                createElement(modal.contentEl.createEl("h4"), { text: lang_default.get("Name"), style: { margin: "20px 0" } });
                createElement(modal.contentEl.createEl("input"), {
                  style: { width: "100%", padding: "5px 10px" },
                  attrs: { type: "text" },
                  value: file2.name || activeFile.name,
                  change: (el) => {
                    modal.storage.name = el.value;
                  }
                });
                createElement(modal.contentEl.createEl("h4"), { text: lang_default.get("Remark"), style: { margin: "20px 0" } });
                createElement(modal.contentEl.createEl("textarea"), {
                  style: { width: "100%", height: "100px", resize: "none", padding: "10px" },
                  value: file2.remark || "",
                  change: (el) => {
                    modal.storage.remark = el.value;
                  }
                });
              }
            },
            callback: (modal, data) => {
              var _a;
              if (activeFile && !Array.isArray(data)) {
                file2.label = data.value;
                file2.name = activeFile.name !== modal.storage.name ? modal.storage.name : "";
                file2.remark = modal.storage.remark;
                file2.level = modal.storage.remind.level;
                file2.remind = modal.storage.remind.date();
                this.savePluginData();
                (_a = FileForgettingCurveView.instance) == null ? void 0 : _a.updateList();
              }
            }
          });
        });
        return item;
      });
    } else {
      menu.addItem((item) => {
        item.setTitle(lang_default.get("Create Remind - File Forgetting Curve")).setIcon("bell").onClick(() => {
          this.openPicker({
            event: {
              content: (modal) => {
                if (!modal.options.length)
                  return;
                createElement(modal.contentEl.createEl("h4"), { text: lang_default.get("Remind Date"), style: { margin: "20px 0" } });
                modal.storage.remind = ForgettingCurveTime[1];
                const select = createElement(modal.contentEl.createEl("select"), {
                  class: "dropdown",
                  change: (el) => {
                    for (let i of ForgettingCurveTime) {
                      if (i.name === el.value) {
                        modal.storage.remind = i;
                      }
                    }
                  }
                }, ForgettingCurveTime.map((i) => {
                  let recommend = modal.storage.remind == i;
                  return createElement("option", { text: `${i.date()} - ${i.name}${recommend ? " - " + lang_default.get("Recommend") : ""}`, value: i.name });
                }));
                select.value = modal.storage.remind.name;
                createElement(modal.contentEl.createEl("div"), { style: { marginTop: "10px" } }, ForgettingCurveTime.map((i, index) => {
                  return createElement(modal.contentEl.createEl("button"), {
                    text: `${lang_default.get(i.description)} - ${i.name}${index === 1 ? " - " + lang_default.get("Recommend") : ""}`,
                    style: { marginRight: "10px", marginTop: "10px" },
                    click: () => {
                      modal.storage.remind = i;
                      select.value = modal.storage.remind.name;
                    }
                  });
                }));
                createElement(modal.contentEl.createEl("h4"), { text: lang_default.get("Name"), style: { margin: "20px 0" } });
                createElement(modal.contentEl.createEl("input"), {
                  style: { width: "100%", padding: "5px 10px" },
                  attrs: { type: "text" },
                  value: activeFile.name,
                  change: (el) => {
                    modal.storage.name = el.value;
                  }
                });
                createElement(modal.contentEl.createEl("h4"), { text: lang_default.get("Remark"), style: { margin: "20px 0" } });
                createElement(modal.contentEl.createEl("textarea"), {
                  style: { width: "100%", height: "100px", resize: "none", padding: "10px" },
                  change: (el) => {
                    modal.storage.remark = el.value;
                  }
                });
              }
            },
            callback: (modal, data) => {
              var _a;
              if (activeFile && !Array.isArray(data)) {
                this.data.files.push({
                  label: data.value,
                  file: activeFile.path,
                  name: activeFile.name !== modal.storage.name ? modal.storage.name : "",
                  remark: modal.storage.remark,
                  level: modal.storage.remind.level,
                  remind: modal.storage.remind.date(),
                  date: (0, import_dayjs3.default)().format(DateFormat)
                });
                this.savePluginData();
                (_a = FileForgettingCurveView.instance) == null ? void 0 : _a.updateList();
              }
            }
          });
        });
        return item;
      });
    }
  }
};

// main.ts
var main_default = FileForgettingCurve;
