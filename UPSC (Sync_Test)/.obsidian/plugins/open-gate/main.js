/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OpenGatePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/SetingTab.ts
var import_obsidian3 = require("obsidian");

// src/ModalEditGate.ts
var import_obsidian2 = require("obsidian");

// src/fns/formEditGate.ts
var import_obsidian = require("obsidian");

// src/fns/getSvgIcon.ts
var getSvgIcon = (siteUrl) => {
  const hostName = new URL(siteUrl).hostname;
  return `<svg viewBox="0 0 100 100"><image href="https://www.google.com/s2/favicons?domain=${hostName}&sz=100" height="100" width="100" /></svg>`;
};

// src/fns/formEditGate.ts
var formEditGate = (contentEl, gateOptions, onSubmit) => {
  new import_obsidian.Setting(contentEl).setName("URL").addText((text) => text.setPlaceholder("https://example.com").setValue(gateOptions.url).onChange(async (value) => {
    gateOptions.url = value;
  }));
  new import_obsidian.Setting(contentEl).setName("Name").setDesc("Leave it blank to enable auto-fetch").addText((text) => text.setValue(gateOptions.title).onChange(async (value) => {
    gateOptions.title = value;
  }));
  new import_obsidian.Setting(contentEl).setName("Icon").setDesc("Leave it blank to enable auto-detect").addText((text) => text.setValue(gateOptions.icon).onChange(async (value) => {
    gateOptions.icon = value;
  }));
  new import_obsidian.Setting(contentEl).setName("Pin to menu").addToggle((text) => text.setValue(gateOptions.hasRibbon === true).onChange(async (value) => {
    gateOptions.hasRibbon = value;
  }));
  new import_obsidian.Setting(contentEl).setName("Position").addDropdown((text) => {
    var _a;
    return text.addOption("left", "Left").addOption("right", "Right").addOption("center", "Center").setValue((_a = gateOptions.position) != null ? _a : "right").onChange(async (value) => {
      gateOptions.position = value;
    });
  });
  new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText(gateOptions.id ? "Update" : "Create").setCta().onClick(async () => {
    if (gateOptions.id === "") {
      gateOptions.id = btoa(gateOptions.url);
    }
    if (gateOptions.icon === "") {
      gateOptions.icon = getSvgIcon(gateOptions.url);
    }
    if (gateOptions.title === "") {
      btn.setButtonText("Fetching title...");
      btn.setDisabled(true);
      try {
        gateOptions.title = await getTitle(gateOptions.url);
      } catch (error) {
        gateOptions.title = gateOptions.url;
        new import_obsidian.Notice("Failed to fetch title");
      }
    }
    onSubmit(gateOptions);
  }));
};
var getTitle = (url) => {
  return fetch(`https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`).then((response) => response.text()).then((html) => {
    const doc = new DOMParser().parseFromString(html, "text/html");
    const title = doc.querySelectorAll("title")[0];
    return title.innerText;
  });
};

// src/ModalEditGate.ts
var ModalEditGate = class extends import_obsidian2.Modal {
  constructor(app, gateOptions, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.gateOptions = gateOptions;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Opening new gate" });
    formEditGate(contentEl, this.gateOptions, (result) => {
      this.onSubmit(result);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/fns/createEmptyGateOption.ts
var createEmptyGateOption = () => {
  return {
    id: "",
    title: "",
    icon: "",
    hasRibbon: true,
    position: "right",
    url: ""
  };
};

// src/SetingTab.ts
var SettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async updateGate(gate) {
    await this.plugin.addGate(gate);
    this.display();
  }
  display() {
    this.shouldNotify = false;
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("button", { text: "New gate", cls: "mod-cta" }).addEventListener("click", () => {
      new ModalEditGate(this.app, createEmptyGateOption(), this.updateGate.bind(this)).open();
    });
    containerEl.createEl("hr");
    const settingContainerEl = containerEl.createDiv("setting-container");
    for (const gateId in this.plugin.settings.gates) {
      const gate = this.plugin.settings.gates[gateId];
      const gateEl = settingContainerEl.createEl("div", {
        attr: {
          "data-gate-id": gate.id
        }
      });
      new import_obsidian3.Setting(gateEl).setName(gate.title).setDesc(gate.url).addButton((button) => {
        button.setButtonText("Delete").onClick(async () => {
          await this.plugin.removeGate(gateId);
          gateEl.remove();
        });
      }).addButton((button) => {
        button.setButtonText("Edit").onClick(() => {
          new ModalEditGate(this.app, gate, this.updateGate.bind(this)).open();
        });
      });
    }
    containerEl.createEl("h3", { text: "Help" });
    containerEl.createEl("small", {
      attr: {
        style: "display: block; margin-bottom: 5px"
      },
      text: "When delete or edit a gate, you need to reload Obsidian to see the changes."
    });
    containerEl.createEl("small", {
      attr: {
        style: "display: block; margin-bottom: 1em;"
      },
      text: `To reload Obsidian, you can use the menu "view -> Force reload" or "Reload App" in the command palette.`
    });
    new import_obsidian3.Setting(containerEl).setName("Follow me on Twitter").setDesc("@duocdev").addButton((button) => {
      button.setCta();
      button.setButtonText("Follow for update").onClick(() => {
        window.open("https://twitter.com/duocdev");
      });
    }).addButton((button) => {
      button.buttonEl.outerHTML = "<a href='https://paypal.me/duocnguyen' target='_blank'><img style='border:0px;height:35px;' src='https://cdn.ko-fi.com/cdn/kofi3.png?v=3' /></a>";
    });
  }
};

// src/GateView.ts
var import_obsidian4 = require("obsidian");

// src/fns/createWebviewTag.ts
var createWebviewTag = (url) => {
  const id = "open-gate";
  const webviewTag = document.createElement("webview");
  webviewTag.setAttribute("allowpopups", "");
  webviewTag.setAttribute("partition", "persist:" + id);
  webviewTag.setAttribute("src", url);
  webviewTag.addClass("open-gate-webview");
  return webviewTag;
};

// src/GateView.ts
var GateView = class extends import_obsidian4.ItemView {
  constructor(leaf, options) {
    super(leaf);
    this.navigation = false;
    this.options = options;
  }
  addActions() {
    this.addAction("refresh-ccw", "Reload", () => {
      this.frame.reload();
    });
    this.addAction("home", "Home page", () => {
      var _a, _b;
      this.frame.loadURL((_b = (_a = this.options) == null ? void 0 : _a.url) != null ? _b : "about:blank");
    });
  }
  onload() {
    var _a;
    super.onload();
    this.addActions();
    this.contentEl.empty();
    this.contentEl.addClass("open-gate-view");
    if ((_a = this.options) == null ? void 0 : _a.url) {
      this.frame = createWebviewTag(this.options.url);
    }
    this.contentEl.appendChild(this.frame);
  }
  onPaneMenu(menu, source) {
    super.onPaneMenu(menu, source);
    menu.addItem((item) => {
      item.setTitle("Reload");
      item.setIcon("refresh-ccw");
      item.onClick(() => {
        this.frame.reload();
      });
    });
    menu.addItem((item) => {
      item.setTitle("Home page");
      item.setIcon("home");
      item.onClick(() => {
        var _a, _b;
        this.frame.loadURL((_b = (_a = this.options) == null ? void 0 : _a.url) != null ? _b : "about:blank");
      });
    });
    menu.addItem((item) => {
      item.setTitle("Toggle DevTools");
      item.setIcon("file-cog");
      item.onClick(() => {
        if (this.frame.isDevToolsOpened()) {
          this.frame.closeDevTools();
        } else {
          this.frame.openDevTools();
        }
      });
    });
  }
  getViewType() {
    var _a, _b;
    return (_b = (_a = this.options) == null ? void 0 : _a.id) != null ? _b : "gate";
  }
  getDisplayText() {
    var _a, _b;
    return (_b = (_a = this.options) == null ? void 0 : _a.title) != null ? _b : "Gate";
  }
  getIcon() {
    var _a, _b, _c;
    if ((_a = this.options) == null ? void 0 : _a.icon.startsWith("<svg")) {
      return this.options.id;
    }
    return (_c = (_b = this.options) == null ? void 0 : _b.icon) != null ? _c : "globe";
  }
};

// src/fns/openView.ts
var openView = async (workspace, id, position) => {
  let leaf;
  let leafs = workspace.getLeavesOfType(id);
  if (leafs.length == 0) {
    createView(workspace, id, position);
  }
  leaf = workspace.getLeavesOfType(id)[0];
  workspace.revealLeaf(leaf);
};
var createView = (workspace, id, position) => {
  let leaf;
  switch (position) {
    case "left":
      leaf = workspace.getLeftLeaf(false);
      break;
    case "center":
      leaf = workspace.getLeaf(false);
      break;
    case "right":
    default:
      leaf = workspace.getRightLeaf(false);
      break;
  }
  leaf == null ? void 0 : leaf.setViewState({ type: id, active: true });
};

// src/fns/registerGate.ts
var import_obsidian5 = require("obsidian");
var registerGate = (plugin, options) => {
  plugin.registerView(options.id, (leaf) => {
    return new GateView(leaf, options);
  });
  let iconName = options.icon;
  if (options.icon.startsWith("<svg")) {
    (0, import_obsidian5.addIcon)(options.id, options.icon);
    iconName = options.id;
  }
  if (options.hasRibbon) {
    plugin.addRibbonIcon(iconName, options.title, async (evt) => openView(plugin.app.workspace, options.id, options.position));
  }
  plugin.addCommand({
    id: `open-gate-${btoa(options.url)}`,
    name: `Open gate ${options.title}`,
    callback: async () => await openView(plugin.app.workspace, options.id, options.position)
  });
};

// src/ModalOnboarding.ts
var import_obsidian6 = require("obsidian");
var ModalOnBoarding = class extends import_obsidian6.Modal {
  constructor(app, gateOptions, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.gateOptions = gateOptions;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Welcome to OpenGate" });
    contentEl.createEl("p", {
      text: "OpenGate is a plugin that allows you to embed any website in Obsidian. You will never have to leave Obsidian again!"
    });
    contentEl.createEl("p", {
      text: "But now you have to create your first gate."
    });
    formEditGate(contentEl, this.gateOptions, (result) => {
      this.onSubmit(result);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/fns/unloadView.ts
var unloadView = async (workspace, gate) => {
  workspace.detachLeavesOfType(gate.id);
  const ribbonIcons = workspace.containerEl.querySelector(`div[aria-label="${gate.title}"]`);
  if (ribbonIcons) {
    ribbonIcons.remove();
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  isFirstRun: true,
  gates: {}
};
var OpenGatePlugin = class extends import_obsidian7.Plugin {
  async onload() {
    await this.loadSettings();
    for (const gateId in this.settings.gates) {
      const gate = this.settings.gates[gateId];
      registerGate(this, gate);
    }
    this.addSettingTab(new SettingTab(this.app, this));
    this.addCommand({
      id: `open-gate-create-new`,
      name: `Create new gate`,
      callback: async () => {
        new ModalEditGate(this.app, createEmptyGateOption(), async (gate) => {
          await this.addGate(gate);
        }).open();
      }
    });
  }
  onunload() {
  }
  async addGate(gate) {
    if (!this.settings.gates.hasOwnProperty(gate.id)) {
      registerGate(this, gate);
    } else {
      new import_obsidian7.Notice("This change will take effect after you reload Obsidian.");
    }
    this.settings.gates[gate.id] = gate;
    await this.saveSettings();
  }
  async removeGate(gateId) {
    if (!this.settings.gates[gateId]) {
      new import_obsidian7.Notice("Gate not found");
    }
    const gate = this.settings.gates[gateId];
    await unloadView(this.app.workspace, gate);
    delete this.settings.gates[gateId];
    await this.saveSettings();
    new import_obsidian7.Notice("This change will take effect after you reload Obsidian.");
  }
  async loadSettings() {
    this.settings = await this.loadData();
    if (!this.settings) {
      this.settings = DEFAULT_SETTINGS;
    }
    if (!this.settings.isFirstRun) {
      return;
    }
    this.settings.isFirstRun = false;
    await this.saveSettings();
    if (Object.keys(this.settings.gates).length === 0) {
      new ModalOnBoarding(this.app, createEmptyGateOption(), async (gate) => {
        await this.addGate(gate);
      }).open();
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
